(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const C of document.querySelectorAll('link[rel="modulepreload"]'))X(C);new MutationObserver(C=>{for(const g of C)if(g.type==="childList")for(const Y of g.addedNodes)Y.tagName==="LINK"&&Y.rel==="modulepreload"&&X(Y)}).observe(document,{childList:!0,subtree:!0});function x(C){const g={};return C.integrity&&(g.integrity=C.integrity),C.referrerPolicy&&(g.referrerPolicy=C.referrerPolicy),C.crossOrigin==="use-credentials"?g.credentials="include":C.crossOrigin==="anonymous"?g.credentials="omit":g.credentials="same-origin",g}function X(C){if(C.ep)return;C.ep=!0;const g=x(C);fetch(C.href,g)}})();var s={gravity:-9.81,dt:1/120,flipRatio:.9,numPressureIters:100,numParticleIters:2,frameNr:0,overRelaxation:1.9,compensateDrift:!0,separateParticles:!0,obstacleX:0,obstacleY:0,obstacleRadius:.15,paused:!0,showObstacle:!0,obstacleVelX:0,obstacleVelY:0,showParticles:!0,showGrid:!1,fluid:null};function Yt(){console.log("Pouring fluid...");var A=document.getElementById("myCanvas"),t=A.getContext("webgl");A.width=window.innerWidth-8,A.height=window.innerHeight-8,A.focus();var x=5,X=A.height/x,C=A.width/X,g=0,Y=1,H=2;function F(o,a,i){return o<a?a:o>i?i:o}class pt{constructor(a,i,r,f,c,l){this.density=a,this.fNumX=Math.floor(i/f)+1,this.fNumY=Math.floor(r/f)+1,this.h=Math.max(i/this.fNumX,r/this.fNumY),this.fInvSpacing=1/this.h,this.fNumCells=this.fNumX*this.fNumY,this.u=new Float32Array(this.fNumCells),this.v=new Float32Array(this.fNumCells),this.du=new Float32Array(this.fNumCells),this.dv=new Float32Array(this.fNumCells),this.prevU=new Float32Array(this.fNumCells),this.prevV=new Float32Array(this.fNumCells),this.p=new Float32Array(this.fNumCells),this.s=new Float32Array(this.fNumCells),this.cellType=new Int32Array(this.fNumCells),this.cellColor=new Float32Array(3*this.fNumCells),this.maxParticles=l,this.particlePos=new Float32Array(2*this.maxParticles),this.particleColor=new Float32Array(3*this.maxParticles);for(var e=0;e<this.maxParticles;e++)this.particleColor[3*e+2]=1;this.particleVel=new Float32Array(2*this.maxParticles),this.particleDensity=new Float32Array(this.fNumCells),this.particleRestDensity=0,this.particleRadius=c,this.pInvSpacing=1/(2.2*c),this.pNumX=Math.floor(i*this.pInvSpacing)+1,this.pNumY=Math.floor(r*this.pInvSpacing)+1,this.pNumCells=this.pNumX*this.pNumY,this.numCellParticles=new Int32Array(this.pNumCells),this.firstCellParticle=new Int32Array(this.pNumCells+1),this.cellParticleIds=new Int32Array(l),this.numParticles=0}integrateParticles(a,i){for(var r=0;r<this.numParticles;r++)this.particleVel[2*r+1]+=a*i,this.particlePos[2*r]+=this.particleVel[2*r]*a,this.particlePos[2*r+1]+=this.particleVel[2*r+1]*a}pushParticlesApart(a){var i=.001;this.numCellParticles.fill(0);for(var r=0;r<this.numParticles;r++){var f=this.particlePos[2*r],c=this.particlePos[2*r+1],l=F(Math.floor(f*this.pInvSpacing),0,this.pNumX-1),e=F(Math.floor(c*this.pInvSpacing),0,this.pNumY-1),n=l*this.pNumY+e;this.numCellParticles[n]++}for(var h=0,r=0;r<this.pNumCells;r++)h+=this.numCellParticles[r],this.firstCellParticle[r]=h;this.firstCellParticle[this.pNumCells]=h;for(var r=0;r<this.numParticles;r++){var f=this.particlePos[2*r],c=this.particlePos[2*r+1],l=F(Math.floor(f*this.pInvSpacing),0,this.pNumX-1),e=F(Math.floor(c*this.pInvSpacing),0,this.pNumY-1),n=l*this.pNumY+e;this.firstCellParticle[n]--,this.cellParticleIds[this.firstCellParticle[n]]=r}for(var u=2*this.particleRadius,d=u*u,m=0;m<a;m++)for(var r=0;r<this.numParticles;r++)for(var v=this.particlePos[2*r],P=this.particlePos[2*r+1],b=Math.floor(v*this.pInvSpacing),p=Math.floor(P*this.pInvSpacing),y=Math.max(b-1,0),R=Math.max(p-1,0),M=Math.min(b+1,this.pNumX-1),_=Math.min(p+1,this.pNumY-1),l=y;l<=M;l++)for(var e=R;e<=_;e++)for(var n=l*this.pNumY+e,h=this.firstCellParticle[n],W=this.firstCellParticle[n+1],E=h;E<W;E++){var N=this.cellParticleIds[E];if(N!=r){var K=this.particlePos[2*N],J=this.particlePos[2*N+1],O=K-v,w=J-P,U=O*O+w*w;if(!(U>d||U==0)){var z=Math.sqrt(U),k=.5*(u-z)/z;O*=k,w*=k,this.particlePos[2*r]-=O,this.particlePos[2*r+1]-=w,this.particlePos[2*N]+=O,this.particlePos[2*N+1]+=w;for(var D=0;D<3;D++){var B=this.particleColor[3*r+D],I=this.particleColor[3*N+D],L=(B+I)*.5;this.particleColor[3*r+D]=B+(L-B)*i,this.particleColor[3*N+D]=I+(L-I)*i}}}}}handleParticleCollisions(a,i,r){for(var f=1/this.fInvSpacing,c=this.particleRadius,l=r+c,e=l*l,n=f+c,h=(this.fNumX-1)*f-c,u=f+c,d=(this.fNumY-1)*f-c,m=0;m<this.numParticles;m++){var v=this.particlePos[2*m],P=this.particlePos[2*m+1],b=v-a,p=P-i,y=b*b+p*p;y<e&&(this.particleVel[2*m]=s.obstacleVelX,this.particleVel[2*m+1]=s.obstacleVelY),v<n&&(v=n,this.particleVel[2*m]=0),v>h&&(v=h,this.particleVel[2*m]=0),P<u&&(P=u,this.particleVel[2*m+1]=0),P>d&&(P=d,this.particleVel[2*m+1]=0),this.particlePos[2*m]=v,this.particlePos[2*m+1]=P}}updateParticleDensity(){var a=this.fNumY,i=this.h,r=this.fInvSpacing,f=.5*i,c=this.particleDensity;c.fill(0);for(var l=0;l<this.numParticles;l++){var e=this.particlePos[2*l],n=this.particlePos[2*l+1];e=F(e,i,(this.fNumX-1)*i),n=F(n,i,(this.fNumY-1)*i);var h=Math.floor((e-f)*r),u=(e-f-h*i)*r,d=Math.min(h+1,this.fNumX-2),m=Math.floor((n-f)*r),v=(n-f-m*i)*r,P=Math.min(m+1,this.fNumY-2),b=1-u,p=1-v;h<this.fNumX&&m<this.fNumY&&(c[h*a+m]+=b*p),d<this.fNumX&&m<this.fNumY&&(c[d*a+m]+=u*p),d<this.fNumX&&P<this.fNumY&&(c[d*a+P]+=u*v),h<this.fNumX&&P<this.fNumY&&(c[h*a+P]+=b*v)}if(this.particleRestDensity==0){for(var y=0,R=0,l=0;l<this.fNumCells;l++)this.cellType[l]==g&&(y+=c[l],R++);R>0&&(this.particleRestDensity=y/R)}}transferVelocities(a,i){var r=this.fNumY,f=this.h,c=this.fInvSpacing,l=.5*f;if(a){this.prevU.set(this.u),this.prevV.set(this.v),this.du.fill(0),this.dv.fill(0),this.u.fill(0),this.v.fill(0);for(var e=0;e<this.fNumCells;e++)this.cellType[e]=this.s[e]==0?H:Y;for(var e=0;e<this.numParticles;e++){var n=this.particlePos[2*e],h=this.particlePos[2*e+1],u=F(Math.floor(n*c),0,this.fNumX-1),d=F(Math.floor(h*c),0,this.fNumY-1),m=u*r+d;this.cellType[m]==Y&&(this.cellType[m]=g)}}for(var v=0;v<2;v++){for(var P=v==0?0:l,b=v==0?l:0,p=v==0?this.u:this.v,y=v==0?this.prevU:this.prevV,R=v==0?this.du:this.dv,e=0;e<this.numParticles;e++){var n=this.particlePos[2*e],h=this.particlePos[2*e+1];n=F(n,f,(this.fNumX-1)*f),h=F(h,f,(this.fNumY-1)*f);var M=Math.min(Math.floor((n-P)*c),this.fNumX-2),_=(n-P-M*f)*c,W=Math.min(M+1,this.fNumX-2),E=Math.min(Math.floor((h-b)*c),this.fNumY-2),N=(h-b-E*f)*c,K=Math.min(E+1,this.fNumY-2),J=1-_,O=1-N,w=J*O,U=_*O,z=_*N,k=J*N,D=M*r+E,B=W*r+E,I=W*r+K,L=M*r+K;if(a){var Q=this.particleVel[2*e+v];p[D]+=Q*w,R[D]+=w,p[B]+=Q*U,R[B]+=U,p[I]+=Q*z,R[I]+=z,p[L]+=Q*k,R[L]+=k}else{var Z=v==0?r:1,at=this.cellType[D]!=Y||this.cellType[D-Z]!=Y?1:0,st=this.cellType[B]!=Y||this.cellType[B-Z]!=Y?1:0,lt=this.cellType[I]!=Y||this.cellType[I-Z]!=Y?1:0,ot=this.cellType[L]!=Y||this.cellType[L-Z]!=Y?1:0,Nt=this.particleVel[2*e+v],R=at*w+st*U+lt*z+ot*k;if(R>0){var gt=(at*w*p[D]+st*U*p[B]+lt*z*p[I]+ot*k*p[L])/R,yt=(at*w*(p[D]-y[D])+st*U*(p[B]-y[B])+lt*z*(p[I]-y[I])+ot*k*(p[L]-y[L]))/R,Ft=Nt+yt;this.particleVel[2*e+v]=(1-i)*gt+i*Ft}}}if(a){for(var e=0;e<p.length;e++)R[e]>0&&(p[e]/=R[e]);for(var e=0;e<this.fNumX;e++)for(var T=0;T<this.fNumY;T++){var mt=this.cellType[e*r+T]==H;(mt||e>0&&this.cellType[(e-1)*r+T]==H)&&(this.u[e*r+T]=this.prevU[e*r+T]),(mt||T>0&&this.cellType[e*r+T-1]==H)&&(this.v[e*r+T]=this.prevV[e*r+T])}}}}solveIncompressibility(a,i,r,f=!0){this.p.fill(0),this.prevU.set(this.u),this.prevV.set(this.v);for(var c=this.fNumY,l=this.density*this.h/i,e=0;e<this.fNumCells;e++)this.u[e],this.v[e];for(var n=0;n<a;n++)for(var e=1;e<this.fNumX-1;e++)for(var h=1;h<this.fNumY-1;h++)if(this.cellType[e*c+h]==g){var u=e*c+h,d=(e-1)*c+h,m=(e+1)*c+h,v=e*c+h-1,P=e*c+h+1,M=this.s[u],b=this.s[d],p=this.s[m],y=this.s[v],R=this.s[P],M=b+p+y+R;if(M!=0){var _=this.u[m]-this.u[u]+this.v[P]-this.v[u];if(this.particleRestDensity>0&&f){var W=1,E=this.particleDensity[e*c+h]-this.particleRestDensity;E>0&&(_=_-W*E)}var N=-_/M;N*=r,this.p[u]+=l*N,this.u[u]-=b*N,this.u[m]+=p*N,this.v[u]-=y*N,this.v[P]+=R*N}}}updateParticleColors(){for(var a=this.fInvSpacing,i=0;i<this.numParticles;i++){var r=.01;this.particleColor[3*i]=F(this.particleColor[3*i]-r,0,1),this.particleColor[3*i+1]=F(this.particleColor[3*i+1]-r,0,1),this.particleColor[3*i+2]=F(this.particleColor[3*i+2]+r,0,1);var f=this.particlePos[2*i],c=this.particlePos[2*i+1],l=F(Math.floor(f*a),1,this.fNumX-1),e=F(Math.floor(c*a),1,this.fNumY-1),n=l*this.fNumY+e,h=this.particleRestDensity;if(h>0){var u=this.particleDensity[n]/h;if(u<.7){var r=.8;this.particleColor[3*i]=r,this.particleColor[3*i+1]=r,this.particleColor[3*i+2]=1}}}}setSciColor(a,i,r,f){i=Math.min(Math.max(i,r),f-1e-4);var c=f-r;i=c==0?.5:(i-r)/c;var l=.25,e=Math.floor(i/l),n=(i-e*l)/l,h,u,d;switch(e){case 0:h=0,u=n,d=1;break;case 1:h=0,u=1,d=1-n;break;case 2:h=n,u=1,d=0;break;case 3:h=1,u=1-n,d=0;break}this.cellColor[3*a]=h,this.cellColor[3*a+1]=u,this.cellColor[3*a+2]=d}updateCellColors(){this.cellColor.fill(0);for(var a=0;a<this.fNumCells;a++)if(this.cellType[a]==H)this.cellColor[3*a]=.5,this.cellColor[3*a+1]=.5,this.cellColor[3*a+2]=.5;else if(this.cellType[a]==g){var i=this.particleDensity[a];this.particleRestDensity>0&&(i/=this.particleRestDensity),this.setSciColor(a,i,0,2)}}simulate(a,i,r,f,c,l,e,n,h,u,d){for(var m=1,v=a/m,P=0;P<m;P++)this.integrateParticles(v,i),n&&this.pushParticlesApart(c),this.handleParticleCollisions(h,u,d),this.transferVelocities(!0),this.updateParticleDensity(),this.solveIncompressibility(f,v,l,e),this.transferVelocities(!1,r);this.updateParticleColors(),this.updateCellColors()}}function dt(){s.obstacleRadius=.15,s.overRelaxation=1.9,s.dt=1/60,s.numPressureIters=50,s.numParticleIters=2;var o=100,a=1*x,i=1*C,r=a/o,f=1e3,c=.8,l=.6,e=.3*r,n=2*e,h=Math.sqrt(3)/2*n,u=Math.floor((l*i-2*r-2*e)/n),d=Math.floor((c*a-2*r-2*e)/h),m=u*d;let v=s.fluid=new pt(f,i,a,r,e,m);v.numParticles=u*d;for(var P=0,b=0;b<u;b++)for(var p=0;p<d;p++)v.particlePos[P++]=r+e+n*b+(p%2==0?0:e),v.particlePos[P++]=r+e+h*p;for(var y=v.fNumY,b=0;b<v.fNumX;b++)for(var p=0;p<v.fNumY;p++){var R=1;(b==0||b==v.fNumX-1||p==0)&&(R=0),v.s[b*y+p]=R}et(3,2,!0)}const Pt=`
		attribute vec2 attrPosition;
		attribute vec3 attrColor;
		uniform vec2 domainSize;
		uniform float pointSize;
		uniform float drawDisk;

		varying vec3 fragColor;
		varying float fragDrawDisk;

		void main() {
		vec4 screenTransform = 
			vec4(2.0 / domainSize.x, 2.0 / domainSize.y, -1.0, -1.0);
		gl_Position =
			vec4(attrPosition * screenTransform.xy + screenTransform.zw, 0.0, 1.0);

		gl_PointSize = pointSize;
		fragColor = attrColor;
		fragDrawDisk = drawDisk;
		}
	`,At=`
		precision mediump float;
		varying vec3 fragColor;
		varying float fragDrawDisk;

		void main() {
			if (fragDrawDisk == 1.0) {
				float rx = 0.5 - gl_PointCoord.x;
				float ry = 0.5 - gl_PointCoord.y;
				float r2 = rx * rx + ry * ry;
				if (r2 > 0.25)
					discard;
			}
			gl_FragColor = vec4(fragColor, 1.0);
		}
	`,bt=`
		attribute vec2 attrPosition;
		uniform vec2 domainSize;
		uniform vec3 color;
		uniform vec2 translation;
		uniform float scale;

		varying vec3 fragColor;

		void main() {
			vec2 v = translation + attrPosition * scale;
		vec4 screenTransform = 
			vec4(2.0 / domainSize.x, 2.0 / domainSize.y, -1.0, -1.0);
		gl_Position =
			vec4(v * screenTransform.xy + screenTransform.zw, 0.0, 1.0);

		fragColor = color;
		}
	`,Ct=`
		precision mediump float;
		varying vec3 fragColor;

		void main() {
			gl_FragColor = vec4(fragColor, 1.0);
		}
	`;function ht(o,a,i){const r=o.createShader(o.VERTEX_SHADER);o.shaderSource(r,a),o.compileShader(r),o.getShaderParameter(r,o.COMPILE_STATUS)||console.log("vertex shader compile error: "+o.getShaderInfoLog(r));const f=o.createShader(o.FRAGMENT_SHADER);o.shaderSource(f,i),o.compileShader(f),o.getShaderParameter(f,o.COMPILE_STATUS)||console.log("fragment shader compile error: "+o.getShaderInfoLog(f));var c=o.createProgram();return o.attachShader(c,r),o.attachShader(c,f),o.linkProgram(c),c}var S=null,V=null,$=null,j=null,G=null,tt=null,q=null,rt=null;function Rt(){if(t.clearColor(0,0,0,1),t.clear(t.COLOR_BUFFER_BIT),t.viewport(0,0,t.canvas.width,t.canvas.height),S==null&&(S=ht(t,Pt,At)),V==null&&(V=ht(t,bt,Ct)),G==null){var o=s.fluid;G=t.createBuffer();for(var a=new Float32Array(2*o.fNumCells),i=0,r=0;r<o.fNumX;r++)for(var f=0;f<o.fNumY;f++)a[i++]=(r+.5)*o.h,a[i++]=(f+.5)*o.h;t.bindBuffer(t.ARRAY_BUFFER,G),t.bufferData(t.ARRAY_BUFFER,a,t.DYNAMIC_DRAW),t.bindBuffer(t.ARRAY_BUFFER,null)}if(tt==null&&(tt=t.createBuffer()),s.showGrid){var c=.9*s.fluid.h/C*A.width;t.useProgram(S),t.uniform2f(t.getUniformLocation(S,"domainSize"),C,x),t.uniform1f(t.getUniformLocation(S,"pointSize"),c),t.uniform1f(t.getUniformLocation(S,"drawDisk"),0),t.bindBuffer(t.ARRAY_BUFFER,G);var l=t.getAttribLocation(S,"attrPosition");t.enableVertexAttribArray(l),t.vertexAttribPointer(l,2,t.FLOAT,!1,0,0),t.bindBuffer(t.ARRAY_BUFFER,tt),t.bufferData(t.ARRAY_BUFFER,s.fluid.cellColor,t.DYNAMIC_DRAW);var e=t.getAttribLocation(S,"attrColor");t.enableVertexAttribArray(e),t.vertexAttribPointer(e,3,t.FLOAT,!1,0,0),t.drawArrays(t.POINTS,0,s.fluid.fNumCells),t.disableVertexAttribArray(l),t.disableVertexAttribArray(e),t.bindBuffer(t.ARRAY_BUFFER,null)}if(s.showParticles){t.clear(t.DEPTH_BUFFER_BIT);var c=2*s.fluid.particleRadius/C*A.width;t.useProgram(S),t.uniform2f(t.getUniformLocation(S,"domainSize"),C,x),t.uniform1f(t.getUniformLocation(S,"pointSize"),c),t.uniform1f(t.getUniformLocation(S,"drawDisk"),1),$==null&&($=t.createBuffer()),j==null&&(j=t.createBuffer()),t.bindBuffer(t.ARRAY_BUFFER,$),t.bufferData(t.ARRAY_BUFFER,s.fluid.particlePos,t.DYNAMIC_DRAW);var l=t.getAttribLocation(S,"attrPosition");t.enableVertexAttribArray(l),t.vertexAttribPointer(l,2,t.FLOAT,!1,0,0),t.bindBuffer(t.ARRAY_BUFFER,j),t.bufferData(t.ARRAY_BUFFER,s.fluid.particleColor,t.DYNAMIC_DRAW);var e=t.getAttribLocation(S,"attrColor");t.enableVertexAttribArray(e),t.vertexAttribPointer(e,3,t.FLOAT,!1,0,0),t.drawArrays(t.POINTS,0,s.fluid.numParticles),t.disableVertexAttribArray(l),t.disableVertexAttribArray(e),t.bindBuffer(t.ARRAY_BUFFER,null)}var n=50;if(q==null){q=t.createBuffer();var h=2*Math.PI/n,u=new Float32Array(2*n+2),i=0;u[i++]=0,u[i++]=0;for(var r=0;r<n;r++)u[i++]=Math.cos(r*h),u[i++]=Math.sin(r*h);t.bindBuffer(t.ARRAY_BUFFER,q),t.bufferData(t.ARRAY_BUFFER,u,t.DYNAMIC_DRAW),t.bindBuffer(t.ARRAY_BUFFER,null),rt=t.createBuffer();var d=new Uint16Array(3*n);i=0;for(var r=0;r<n;r++)d[i++]=0,d[i++]=1+r,d[i++]=1+(r+1)%n;t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,rt),t.bufferData(t.ELEMENT_ARRAY_BUFFER,d,t.DYNAMIC_DRAW),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)}t.clear(t.DEPTH_BUFFER_BIT);var m=[1,0,0];t.useProgram(V),t.uniform2f(t.getUniformLocation(V,"domainSize"),C,x),t.uniform3f(t.getUniformLocation(V,"color"),m[0],m[1],m[2]),t.uniform2f(t.getUniformLocation(V,"translation"),s.obstacleX,s.obstacleY),t.uniform1f(t.getUniformLocation(V,"scale"),s.obstacleRadius+s.fluid.particleRadius),l=t.getAttribLocation(V,"attrPosition"),t.enableVertexAttribArray(l),t.bindBuffer(t.ARRAY_BUFFER,q),t.vertexAttribPointer(l,2,t.FLOAT,!1,0,0),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,rt),t.drawElements(t.TRIANGLES,3*n,t.UNSIGNED_SHORT,0),t.disableVertexAttribArray(l)}function et(o,a,i){var r=0,f=0;i||(r=(o-s.obstacleX)/s.dt,f=(a-s.obstacleY)/s.dt),s.obstacleX=o,s.obstacleY=a;var c=s.obstacleRadius,l=s.fluid,e=l.numY;Math.sqrt(2)*l.h;for(var n=1;n<l.numX-2;n++)for(var h=1;h<l.numY-2;h++)l.s[n*e+h]=1,dx=(n+.5)*l.h-o,dy=(h+.5)*l.h-a,dx*dx+dy*dy<c*c&&(l.s[n*e+h]=0,l.u[n*e+h]=r,l.u[(n+1)*e+h]=r,l.v[n*e+h]=f,l.v[n*e+h+1]=f);s.showObstacle=!0,s.obstacleVelX=r,s.obstacleVelY=f}var it=!1;function nt(o,a){let i=A.getBoundingClientRect(),r=o-i.left-A.clientLeft,f=a-i.top-A.clientTop;it=!0,o=r/X,a=(A.height-f)/X,et(o,a,!0),s.paused=!1}function ct(o,a){if(it){let i=A.getBoundingClientRect(),r=o-i.left-A.clientLeft,f=a-i.top-A.clientTop;o=r/X,a=(A.height-f)/X,et(o,a,!1)}}function ft(){it=!1,s.obstacleVelX=0,s.obstacleVelY=0}A.addEventListener("mousedown",o=>{nt(o.x,o.y)}),A.addEventListener("mouseup",o=>{ft()}),A.addEventListener("mousemove",o=>{ct(o.x,o.y)}),A.addEventListener("touchstart",o=>{nt(o.touches[0].clientX,o.touches[0].clientY)}),A.addEventListener("touchend",o=>{ft()}),A.addEventListener("touchmove",o=>{o.preventDefault(),o.stopImmediatePropagation(),ct(o.touches[0].clientX,o.touches[0].clientY)},{passive:!1}),document.addEventListener("keydown",o=>{switch(o.key){case"p":s.paused=!s.paused;break;case"m":s.paused=!1,ut(),s.paused=!0;break}});function ut(){s.paused||s.fluid.simulate(s.dt,s.gravity,s.flipRatio,s.numPressureIters,s.numParticleIters,s.overRelaxation,s.compensateDrift,s.separateParticles,s.obstacleX,s.obstacleY,s.obstacleRadius,s.colorFieldNr),s.frameNr++}function vt(){ut(),Rt(),requestAnimationFrame(vt)}dt(),vt()}document.querySelector("#app").innerHTML=`

<canvas id="myCanvas"></canvas>

  <div class="controls">
    <div class="control">
      <input type="checkbox" id="showParticles" checked>
      <label for="showParticles">Particles</label>
    </div>
    <div class="control">
      <input type="checkbox" id="showGrid">
      <label for="showGrid">Grid</label>
    </div>
    <div class="control">
      <input type="checkbox" id="compensateDrift" checked>
      <label for="compensateDrift">Compensate Drift</label>
    </div>
    <div class="control">
      <input type="checkbox" id="separateParticles" checked>
      <label for="separateParticles">Separate Particles</label>
    </div>
    <div class="control">
      <input type="range" id="flipRatio" min="0" max="10" value="9" class="slider">
      <label for="flipRatio">PIC to FLIP Ratio</label>
    </div>
  </div>
`;document.getElementById("showParticles").addEventListener("click",()=>{s.showParticles=!s.showParticles});document.getElementById("showGrid").addEventListener("click",()=>{s.showGrid=!s.showGrid});document.getElementById("compensateDrift").addEventListener("click",()=>{s.compensateDrift=!s.compensateDrift});document.getElementById("separateParticles").addEventListener("click",()=>{s.separateParticles=!s.separateParticles});document.getElementById("flipRatio").addEventListener("input",A=>{s.flipRatio=.1*A.target.value});Yt();
